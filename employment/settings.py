"""
Django settings for employment project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
from os import getcwd, chmod
from os.path import join, abspath, dirname, exists
import environ
import sys

root = environ.Path(__file__) - 2
PROJECT_ROOT = abspath(dirname(__file__))
env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=(str, ''),
    ALLOWED_HOSTS=(list, []),
    STATIC_ROOT=(environ.Path(), root('static')),
    STATIC_URL=(str, '/static/'),
    FORCE_SCRIPT_NAME=(str, ''),
    DATABASE_ENGINE=(str,'django.db.backends.postgresql_psycopg2'),
    DATABASE_NAME=(str,''),
    DATABASE_USER=(str, ''),
    DATABASE_PASSWORD=(str, ''),
    DATABASE_HOST=(str, 'localhost'),
    DATABASE_PORT=(str, '5805')
)

env.read_env()

# Build paths inside the project like this: join(BASE_DIR, ...)
FORCE_SCRIPT_NAME = env('FORCE_SCRIPT_NAME')



ELASTICSEARCH = {
    'host': 'kuutosaika.turku.fi',
    'port': 443,
    'use_ssl': True,
    'verify_certs': False,
    'base_url': 'https://viuhka.turku.fi/employment/_search',
    'index': 'employment'
}

LANGUAGE_CODE = 'fi-fi'
TIME_ZONE = 'Europe/Helsinki'
LOGIN_REDIRECT_URL = '/form/'
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
ALLOWED_HOSTS = env('ALLOWED_HOSTS')
SECRET_KEY = env('SECRET_KEY')

# Application definition
BASE_DIR = root()
STATIC_URL = env('STATIC_URL')
STATIC_ROOT = env('STATIC_ROOT')

STATICFILES_DIRS = (
    join(PROJECT_ROOT, 'static'),
)


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'ckeditor',
    'rest_framework',
    'services',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'employment.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'services.context_processors.export_vars',
            ],
        },
    },
]

WSGI_APPLICATION = 'employment.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': env('DATABASE_ENGINE'),
        'NAME': env('DATABASE_NAME'),
        'USER': env('DATABASE_USER'),
        'PASSWORD': env('DATABASE_PASSWORD'),
        'HOST': env('DATABASE_HOST'),
        'PORT': env('DATABASE_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'VIEW_NAME_FUNCTION': 'services.views.get_view_name',
}

# If a secret key was not supplied from elsewhere, generate a random one
# and store it into a file called .django_secret.
if not SECRET_KEY or SECRET_KEY is None:
    secret_file = join(BASE_DIR, '.django_secret')
    try:
        with open(secret_file, 'r') as f:
            SECRET_KEY = f.read().strip()
            if not SECRET_KEY:
                raise IOError
    except IOError:
        import random
        system_random = random.SystemRandom()
        try:
            SECRET_KEY = ''.join([system_random.choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)') for i in range(64)])
            secret = open(secret_file, 'w')
            chmod(secret_file, 0o0600)
            secret.write(SECRET_KEY)
            secret.close()
        except IOError:
            Exception('Please create a %s file with random characters to generate your secret key!' % secret_file)

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# local_settings.py can be used to override environment-specific settings
# like database and email that differ between development and production.
f = join(BASE_DIR, "local_settings.py")
if exists(f):
    import sys
    import imp
    module_name = "%s.local_settings" % ROOT_URLCONF.split('.')[0]
    module = imp.new_module(module_name)
    module.__file__ = f
    sys.modules[module_name] = module
    exec(open(f, "rb").read())

